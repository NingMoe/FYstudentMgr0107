@{
    ViewBag.Title = "About";
}
<style>
    #subNav {
        position: fixed;
        top: 50px;
    }

    .nav a {
        color: #666;
    }

    .nav ul {
        display: none;
    }

    .nav .active ul {
        display: block;
        padding-left: 20px;
    }

    .nav > li > a {
        padding: 5px 15px;
    }

    .nav .active > a {
        color: #f00;
        border-left: 1px solid #f00;
    }

    .nav .active .bold {
        font-weight: bold;
        border-left: 3px solid #f00;
        font-size: 20px;
    }
</style>

<div class="col-lg-9" style="position:relative; padding-bottom: 500px;" data-spy="scroll" data-target＝"#subNav">
    <div class="section">
        <h2 id="gaishu">概览</h2>
        <h3 id="dange">单个还是全部引入</h3>
        <p>JavaScript 插件可以单个引入（使用 Bootstrap 提供的单个 <code>*.js</code> 文件），或者一次性全部引入（使用 <code>bootstrap.js</code> 或压缩版的 <code>bootstrap.min.js</code>）。</p>
        <p>建议使用压缩版的 JavaScript 文件bootstrap.js 和 bootstrap.min.js 都包含了所有插件，你在使用时，只需选择一个引入页面就可以了。</p>
        <p>插件之间的依赖关系某些插件和 CSS 组件依赖于其它插件。如果你是单个引入每个插件的，请确保在文档中检查插件之间的依赖关系。注意，所有插件都依赖 jQuery （也就是说，jQuery必须在所有插件之前引入页面）。 bower.json 文件中列出了 Bootstrap 所支持的 jQuery 版本。</p>
        <h3 id="datashuxing">data 属性</h3>
        <p>你可以仅仅通过 data 属性 API 就能使用所有的 Bootstrap 插件，无需写一行 JavaScript 代码。这是 Bootstrap 中的一等 API，也应该是你的首选方式。</p>
        <p>话又说回来，在某些情况下可能需要将此功能关闭。因此，我们还提供了关闭 data 属性 API 的方法，即解除以 data-api 为命名空间并绑定在文档上的事件。就像下面这样：</p>
        <p>
            <pre>$(document).off('.data-api')</pre>
        </p>
        <p>另外，如果是针对某个特定的插件，只需在 data-api 前面添加那个插件的名称作为命名空间，如下：</p>
        <p>
            <pre>$(document).off('.alert.data-api')</pre>
        </p>
        <h3 id="biancheng">编程方式的 API</h3>
        <p>我们为所有 Bootstrap 插件提供了纯 JavaScript 方式的 API。所有公开的 API 都是支持单独或链式调用方式，并且返回其所操作的元素集合（注：和jQuery的调用形式一致）。</p>
        <p>$('.btn.danger').button('toggle').addClass('fat')</p>
        <p>所有方法都可以接受一个可选的 option 对象作为参数，或者一个代表特定方法的字符串，或者什么也不提供（在这种情况下，插件将会以默认值初始化）：</p>
        <h3 id="bimian">避免命名空间冲突</h3>
        <p>我们为所有 Bootstrap 插件提供了纯 JavaScript 方式的 API。所有公开的 API 都是支持单独或链式调用方式，并且返回其所操作的元素集合（注：和jQuery的调用形式一致）。</p>
        <p>$('.btn.danger').button('toggle').addClass('fat')</p>
        <p>所有方法都可以接受一个可选的 option 对象作为参数，或者一个代表特定方法的字符串，或者什么也不提供（在这种情况下，插件将会以默认值初始化）：</p>
        <h3 id="shijian">事件</h3>
        <p>我们为所有 Bootstrap 插件提供了纯 JavaScript 方式的 API。所有公开的 API 都是支持单独或链式调用方式，并且返回其所操作的元素集合（注：和jQuery的调用形式一致）。</p>
        <p>$('.btn.danger').button('toggle').addClass('fat')</p>
        <p>所有方法都可以接受一个可选的 option 对象作为参数，或者一个代表特定方法的字符串，或者什么也不提供（在这种情况下，插件将会以默认值初始化）：</p>
        <h3 id="weidui">未对禁用 JavaScript 的浏览器提供补救措施</h3>
        <p>我们为所有 Bootstrap 插件提供了纯 JavaScript 方式的 API。所有公开的 API 都是支持单独或链式调用方式，并且返回其所操作的元素集合（注：和jQuery的调用形式一致）。</p>
        <p>$('.btn.danger').button('toggle').addClass('fat')</p>
        <p>所有方法都可以接受一个可选的 option 对象作为参数，或者一个代表特定方法的字符串，或者什么也不提供（在这种情况下，插件将会以默认值初始化）：</p>
    </div>

    <div class="section">
        <h2 id="guodu">过渡效果</h2>
        <h3 id="guanyu">关于过渡效果</h3>
        <p>JavaScript 插件可以单个引入（使用 Bootstrap 提供的单个 <code>*.js</code> 文件），或者一次性全部引入（使用 <code>bootstrap.js</code> 或压缩版的 <code>bootstrap.min.js</code>）。</p>
        <p>建议使用压缩版的 JavaScript 文件bootstrap.js 和 bootstrap.min.js 都包含了所有插件，你在使用时，只需选择一个引入页面就可以了。</p>
        <p>插件之间的依赖关系某些插件和 CSS 组件依赖于其它插件。如果你是单个引入每个插件的，请确保在文档中检查插件之间的依赖关系。注意，所有插件都依赖 jQuery （也就是说，jQuery必须在所有插件之前引入页面）。 bower.json 文件中列出了 Bootstrap 所支持的 jQuery 版本。</p>
        <h3 id="baohan">包含的内容</h3>
        <p>你可以仅仅通过 data 属性 API 就能使用所有的 Bootstrap 插件，无需写一行 JavaScript 代码。这是 Bootstrap 中的一等 API，也应该是你的首选方式。</p>
        <p>话又说回来，在某些情况下可能需要将此功能关闭。因此，我们还提供了关闭 data 属性 API 的方法，即解除以 data-api 为命名空间并绑定在文档上的事件。就像下面这样：</p>
        <p>
            <pre>$(document).off('.data-api')</pre>
        </p>
        <p>另外，如果是针对某个特定的插件，只需在 data-api 前面添加那个插件的名称作为命名空间，如下：</p>
        <p>
            <pre>$(document).off('.alert.data-api')</pre>
        </p>
    </div>

    <div class="section">
        <h2 id="shili">实例</h2>
        <h3 id="jingtai">静态实例</h3>
        <p>JavaScript 插件可以单个引入（使用 Bootstrap 提供的单个 <code>*.js</code> 文件），或者一次性全部引入（使用 <code>bootstrap.js</code> 或压缩版的 <code>bootstrap.min.js</code>）。</p>
        <p>建议使用压缩版的 JavaScript 文件bootstrap.js 和 bootstrap.min.js 都包含了所有插件，你在使用时，只需选择一个引入页面就可以了。</p>
        <p>插件之间的依赖关系某些插件和 CSS 组件依赖于其它插件。如果你是单个引入每个插件的，请确保在文档中检查插件之间的依赖关系。注意，所有插件都依赖 jQuery （也就是说，jQuery必须在所有插件之前引入页面）。 bower.json 文件中列出了 Bootstrap 所支持的 jQuery 版本。</p>
        <h3 id="dongtai">动态实例</h3>
        <p>你可以仅仅通过 data 属性 API 就能使用所有的 Bootstrap 插件，无需写一行 JavaScript 代码。这是 Bootstrap 中的一等 API，也应该是你的首选方式。</p>
        <p>话又说回来，在某些情况下可能需要将此功能关闭。因此，我们还提供了关闭 data 属性 API 的方法，即解除以 data-api 为命名空间并绑定在文档上的事件。就像下面这样：</p>
        <p>
            <pre>$(document).off('.data-api')</pre>
        </p>
        <p>另外，如果是针对某个特定的插件，只需在 data-api 前面添加那个插件的名称作为命名空间，如下：</p>
        <p>
            <pre>$(document).off('.alert.data-api')</pre>
        </p>
        <h3 id="kexuan">可选尺寸</h3>
        <p>我们为所有 Bootstrap 插件提供了纯 JavaScript 方式的 API。所有公开的 API 都是支持单独或链式调用方式，并且返回其所操作的元素集合（注：和jQuery的调用形式一致）。</p>
        <p>$('.btn.danger').button('toggle').addClass('fat')</p>
        <p>所有方法都可以接受一个可选的 option 对象作为参数，或者一个代表特定方法的字符串，或者什么也不提供（在这种情况下，插件将会以默认值初始化）：</p>
        <h3 id="jinzhi">禁止动画效果</h3>
        <p>我们为所有 Bootstrap 插件提供了纯 JavaScript 方式的 API。所有公开的 API 都是支持单独或链式调用方式，并且返回其所操作的元素集合（注：和jQuery的调用形式一致）。</p>
        <p>$('.btn.danger').button('toggle').addClass('fat')</p>
        <p>所有方法都可以接受一个可选的 option 对象作为参数，或者一个代表特定方法的字符串，或者什么也不提供（在这种情况下，插件将会以默认值初始化）：</p>
        <h3 id="yongfa">用法</h3>
        <p>我们为所有 Bootstrap 插件提供了纯 JavaScript 方式的 API。所有公开的 API 都是支持单独或链式调用方式，并且返回其所操作的元素集合（注：和jQuery的调用形式一致）。</p>
        <p>$('.btn.danger').button('toggle').addClass('fat')</p>
        <p>所有方法都可以接受一个可选的 option 对象作为参数，或者一个代表特定方法的字符串，或者什么也不提供（在这种情况下，插件将会以默认值初始化）：</p>
        <h3 id="tongguo1">通过 data 属性</h3>
        <p>我们为所有 Bootstrap 插件提供了纯 JavaScript 方式的 API。所有公开的 API 都是支持单独或链式调用方式，并且返回其所操作的元素集合（注：和jQuery的调用形式一致）。</p>
        <p>$('.btn.danger').button('toggle').addClass('fat')</p>
        <p>所有方法都可以接受一个可选的 option 对象作为参数，或者一个代表特定方法的字符串，或者什么也不提供（在这种情况下，插件将会以默认值初始化）：</p>
        <h3 id="tongguo">通过 JavaScript 调用</h3>
        <p>我们为所有 Bootstrap 插件提供了纯 JavaScript 方式的 API。所有公开的 API 都是支持单独或链式调用方式，并且返回其所操作的元素集合（注：和jQuery的调用形式一致）。</p>
        <p>$('.btn.danger').button('toggle').addClass('fat')</p>
        <p>所有方法都可以接受一个可选的 option 对象作为参数，或者一个代表特定方法的字符串，或者什么也不提供（在这种情况下，插件将会以默认值初始化）：</p>
        <h3 id="canshu">参数</h3>
        <p>我们为所有 Bootstrap 插件提供了纯 JavaScript 方式的 API。所有公开的 API 都是支持单独或链式调用方式，并且返回其所操作的元素集合（注：和jQuery的调用形式一致）。</p>
        <p>$('.btn.danger').button('toggle').addClass('fat')</p>
        <p>所有方法都可以接受一个可选的 option 对象作为参数，或者一个代表特定方法的字符串，或者什么也不提供（在这种情况下，插件将会以默认值初始化）：</p>
        <h3 id="fangfa">方法</h3>
        <p>我们为所有 Bootstrap 插件提供了纯 JavaScript 方式的 API。所有公开的 API 都是支持单独或链式调用方式，并且返回其所操作的元素集合（注：和jQuery的调用形式一致）。</p>
        <p>$('.btn.danger').button('toggle').addClass('fat')</p>
        <p>所有方法都可以接受一个可选的 option 对象作为参数，或者一个代表特定方法的字符串，或者什么也不提供（在这种情况下，插件将会以默认值初始化）：</p>
        <h3 id="shijian2">事件</h3>
        <p>我们为所有 Bootstrap 插件提供了纯 JavaScript 方式的 API。所有公开的 API 都是支持单独或链式调用方式，并且返回其所操作的元素集合（注：和jQuery的调用形式一致）。</p>
        <p>$('.btn.danger').button('toggle').addClass('fat')</p>
        <p>所有方法都可以接受一个可选的 option 对象作为参数，或者一个代表特定方法的字符串，或者什么也不提供（在这种情况下，插件将会以默认值初始化）：</p>
    </div>

</div>
<div class="col-lg-3">
    <nav id="subNav" class="navbar-collapse">
        <ul class="nav">
            <li>
                <a href="#gaishu" class="bold">概览</a>
                <ul class="nav">
                    <li><a href="#dange">单个还是全部引入</a></li>
                    <li><a href="#datashuxing">data 属性</a></li>
                    <li><a href="#biancheng">编程方式的 API</a></li>
                    <li><a href="#bimian">避免命名空间冲突</a></li>
                    <li><a href="#shijian">事件</a></li>
                    <li><a href="#weidui">未对禁用 JavaScript 的浏览器提供补救措施</a></li>
                </ul>
            </li>

            <li>
                <a href="#guodu" class="bold">过渡效果</a>
                <ul class="nav">
                    <li><a href="#guanyu">关于过渡效果</a></li>
                    <li><a href="#baohan">包含的内容</a></li>
                </ul>
            </li>

            <li>
                <a href="#shili" class="bold">实例</a>
                <ul class="nav">
                    <li><a href="#jingtai">静态实例</a></li>
                    <li><a href="#dongtai">动态实例</a></li>
                    <li><a href="#kexuan">可选尺寸</a></li>
                    <li><a href="#jinzhi">禁止动画效果</a></li>
                    <li><a href="#yongfa">用法</a></li>
                    <li><a href="#tongguo1">通过 data 属性</a></li>
                    <li><a href="#tongguo">通过 JavaScript 调用</a></li>
                    <li><a href="#canshu">参数</a></li>
                    <li><a href="#fangfa">方法</a></li>
                    <li><a href="#shijian2">事件</a></li>
                </ul>
            </li>
        </ul>
    </nav>

</div>
@section Scripts {
    <script type="text/javascript">

        seajs.use("modules/home/about");
    </script>
}
